<% provide(:title, @user.name) %>
<div class="row">
<%# <aside>:文書のメインコンテンツと間接的な関係しか持っていない文書の部分（サイドバー等）
を表現します %>
  <aside class="col-md-4">
    <section class="user_info">
      <h1>
        <%# gravatar_for(@user):引数で与えられたユーザーのGravatar画像を返す %>
        <%= gravatar_for @user %>
        <%= @user.name %>
      </h1>
    </section>
  </aside>
  <div class="col-md-8">
    <% if @user.microposts.any? %>
      <%# 1 マイクロポストの投稿数を表示する %>
      <h3>Microposts (<%= @user.microposts.count %>)</h3>
      <ol class="microposts">
        <%# 2 %>
        <%= render @microposts %>
      </ol>
      <%= will_paginate @microposts %>
    <% end %>
  </div>
</div>

<%#1
paginate と同様に、関連付けをとおして count メソッドを呼び出すことができます。 大事なことは、count メソ
ッドではデータベース上のマイクロポストを全部読みだして から結果の配列に対して length を呼ぶ、といった無駄
な処理はしていないという点で す。そんなことをしたら、マイクロポストの数が増加するにつれて効率が低下してし
ま います。そうではなく、(データベース内での計算は高度に最適化されているので)デー タベースに代わりに計算
してもらい、特定の user_id に紐付いたマイクロポストの数を データベースに問い合わせています。(それでも
count メソッドがアプリケーションのボ トルネックになるようなことがあれば、さらに高速な counter cache
を使うこともでき ます。)

-   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
%>

<%# 2
10.3.5 で見た次のコードでは、
[render @users]
_user.html.erb パーシャルを使って自動的に@users 変数内のそれぞれのユーザーを 出力していました。これを参考
に、_micropost.html.erb パーシャルを使ってマイク ロポストのコレクションを表示しようとすると、次のようにな
ります。
[render @microposts]
%>