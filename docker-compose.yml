# 1
version: "3.8"
# services=コンテナ
services:
  tutorial-app:
    # docker build:Dockerfileと指定したコンテキスト（ビルドコンテキスト）からDockerイメージを構築。
    build: .
    # imageとbuildが同時に宣言されている場合, ビルドが優先的に実行されて,
    # imageはその構成に使われる(imageによるプルは発生しない).
    image: rails-tutorial-img
    # コンテナ名の指定
    container_name: rails-tutorial-ctr
    # 5
    # rails s:puma(アプリケーションサーバ)が起動。
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    # 8
    volumes:
      - .:/rails6-tutorial-app
    # ポートの指定（外部からのアクセス時のポート：Dockerコンテナからアクセス時のポート）
    ports:
      - "5000:3000"
    # -itのiの設定。stdin=標準入力をオープン。
    stdin_open: true
    # -itのt=tty
    tty: true



# =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =   =
# 1
# docker-composeはコンテナと周辺環境、ネットワークやボリュームを作成する
# dockerfileはイメージをつくるので、ネットワークやボリュームを作れない
# docker-composeには、コンテナの操作、すなわちdocker runやbuildのオプションの内容を書いていく

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   
# 2
# command:起動時の既定のコマンドを上書きする(docker-composeで指定するcommandはDockerfileよりも優先される).
# mysql:8.0で外部のソフトウェアからmysqlへ接続する認証方式が変わり、セキュリティが強化された。
# 対応していないソフトウェアが多い為、認証方式を古いものに変更する

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 3
# データの永続化。ymlファイルはリストの場合は-を付けて記載する。
# マウント：コンテナからホストのファイルに、まるでコンテナ内にそのファイルがあるかのようにアクセスする。
# （↑dockerの支配下に置く）

# ボリュームマウント：Docker Engineが管理している領域内にボリュームを作成し、ディスクとしてコンテナにマウントする。
# 名前だけで管理できるので、手軽に使える反面、直接操作しづらいので、「仮で使いたい場合」や、「滅多に触らないが、
# 消してはいけないファイル」を置く事に使う事が多い。
# バインドマウント：PC側のDocker Engineが管理していない場所の、既存のディレクトリにマウントする。
# 直接ディレクトリに対してファイルを操作出来るので、頻繁に触りたいファイルはここに置く。
# - db-data(ボリューム名):/var/lib/mysql:ボリュームマウント

# マウントで指定したファイルがコンテナにない場合、ファイルも合わせて作る。
# コンテナはなるべく小さくしたいので、通常データやコードはホストからマウントする。
# ボリュームとは記憶領域の事。ホストの記憶領域にコンテナをマウントする。
# ただし、マウントは記憶領域以外にディレクトリやファイル、メモリの場合もある。
# ホストの./db/mysql_dataにdockerコンテキスト内の/var/lib/mysqlとマウント。
# コンテナを削除すると、その中にあるDBのデータも一緒に消える為、DBをローカルにマウントしておく。
# mysqlのデータは、/var/lib/mysqlに保管されている。
# dbーdata:dockerのvolumes。volumesはDockerのコンテナ内で作成したデータを永続化するための場所。
# volumesはホスト内の/var/lib/docker/volumes/に作られるが、
# Docker環境はHyperKitというVM(バーチャルマシン)上で実行されているため、Macからは参照できない。
# dockerのvolumesは、他のコンテナ同士でデータを共有したい場合に使う。
# その他、dockerファイルでmkdirで作ったディレクトリは、特に指定しないとroot権限で作られる。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 4
# 環境変数の指定（初期設定値）。環境変数はコンテナ間で使う。
# 外部ファイルから複数の環境変数をサービスコンテナー受け渡すには env_fileオプションを利用。
# ↓.envファイルの内容の説明
# MYSQL_ROOT_PASSWORD
# この変数はMySQL作成に必須のもので、MySQLにおけるスーパーユーザである、
# rootアカウントに設定するためのパスワードを指定します。
# MYSQL_DATABASE
# この変数はオプションで、イメージの起動時に作成するデータベースの名前を指定します。
# もしユーザ名とパスワードが指定された場合（下記を参照）は、
# ユーザーはこのデータベースへのスーパーユーザアクセス権（GRANT ALLに相当）を与えられます。
# MYSQL_USER, MYSQL_PASSWORD
# これらの変数はオプションで、新規ユーザの作成とそのユーザのパスワード設定に使用されます。
# このユーザはMYSQL_DATABASE変数で指定されたデータベースに対して、
# スーパーユーザとしての権限（上記を参照）を与えられます。
# どちらの変数も、作成されるユーザのためには必須です。
# この仕組みを、rootユーザの作成に使う必要はないことに注意してください。
# rootユーザはデフォルトで作成され、MYSQL_ROOT_PASSWORD変数により指定されたパスワードが設定されるためです。

# MYSQL_ALLOW_EMPTY_PASSWORD
# オプションの変数です。
# yesを設定することで、rootユーザに空のパスワードを設定してコンテナを起動することを許可します。
# 注意:
# この変数にyesを設定することはおすすめしません。
# この設定は誰もがスーパーユーザの権限を得ることを許しMySQLインスタンスがまったく保護されていない状態になるためです。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 5
# -p 3000:(コンテナの)3000番ポート指定して立ち上げ

# 仮想環境内の仮想マシン(docker)、もしくは別の物理PCで立ち上がっているRailsアプリケーションを、
# 仮想環境の外のブラウザで見るためには、ポートをフォーワーディング（転送）する必要があります。
# [ポートフォワーディング:ポートからポートへデータを転送する。]

# Railsのプロセス（実行中のプログラム、処理）は、外部からのリクエストを受け付けるために、
# Railsプロセスが動いているホスト(dockerコンテナ)が持っているipアドレスに、結び付けられています。
# その結び付けられているアドレスをバインディングアドレスといいます。
# 以前は、デフォルトで、ipアドレス0.0.0.0に結び付けられていましたが、
# 一時期から開発環境では、127.0.0.1(localhostのループバックアドレス）に結び付けられるようになりました。

# [ループバックアドレス:使っているPCそのものを表すipアドレスであり、
# 127.0.0.1というipアドレスが一般的には割り当てられています。]

# そして、このipアドレスのホスト名として、localhostという名前が割り当てられています。
# そのため、http://localhost:3000 として、ブラウザで開いていたところを、
# http127.0.0.1:3000として開いてみても同じように開くことができると思います。
# そして、このループバックアドレスというのは、外部から（今回の場合は仮想環境の外から）はアクセスすることができません。
# 内部からのみアクセスすることができます。
# ipアドレス0.0.0.0の意味:前提として、マシンというのは複数のネットワークインターフェースを持っています。
# つまりは複数のipアドレスを持っているということです。そして、ipアドレス0.0.0.0は、
# そのipアドレス全てを表しています。
# -bオプションというのは、Railsのプロセスをどのipアドレスにバインドするかというものです。
# rails s -b 0.0.0.0というコマンドはRailsのプロセスをipアドレス0.0.0.0だけではなく、
# 仮想マシンが持っている全てのipアドレスにバインディングしているという意味です。
# そのため、外部からアクセスできない、127.0.0.1だけではなく、
# 外部からアクセスできる他のipアドレス（192.168.??.??）などにもバインディングされているため、
# 仮想マシン内からだけではなく仮想マシンの外からもアクセスできます。
# まとめ
# ・ipアドレス127.0.0.1(localhost)は仮想環境外部からはアクセスできない。
# ・仮想マシンは複数のネットワークインターフェースを持っており、ipアドレス127.0.0.1以外は外部からアクセスできる。
# ・開発環境では、rails sとすると、railsプロセスはlocalhost(127.0.0.1)にバインディングされる。
# ・-b 0.0.0.0というオプションをつけると、仮想マシンが持っている全てのネットワークインターフェースにバインディングされるため、仮想環境外部からアクセスできる。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 6
# デフォルトの設定(config/puma.rb)でpumaが起動。オプション-C: 設定ファイル読み込み
# puma.sockを配置するディレクトリを作成
# tmpディレクトリは一時的に使うファイルやディレクトリを保存するディレクトリ
# tmpディレクトリの中にあるファイルやディレクトリはパソコンを再起動すると消える
# /myapp/tmp/socketsディレクトリの作成
# -p:復数階層のディレクトリを1回で作成
# productionモードではディレクトリ内にconfig/master.keyとconfig/credentials.ymlというファイルが必要。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 7
#  Dockerfile と「 コンテクストcontext 」から Docker イメージを構築するコマンドです。
#  構築のコンテクストとは、指定した パス や URL に置かれているファイル全てです。※（apiディレクトリ以下）
#  構築の過程で、そのコンテクストにある全てのファイルを参照できます。
#  たとえば、 COPY 命令を使う時に、コンテクスト内にあるファイルを参照して構築できます。
# context: ./api/:ビルドコンテキストを、apiディレクトリ以下に設定（dockerデーモンに送信）。
# ビルドコンテキストというのは、dockerに「ここにあるファイルを全部読み込んでくれ！」を指定するもの。
# 例えば、.と指定すると、カレントディレクトリにあるファイルすべてがdockerデーモンに送信される。
# ただし、送信される（参照出来るようになる）からと言って、イメージにそのままファイルが組み込まれるわけではない。
# 例えば、カレントディレクトリに1GBの動画ファイルを置いておくと、dockerはそれを読み込むが、
# ADDやCOPY命令をしない限り、イメージに動画ファイルが組み込まれることはないので、
# 1GBの動画ファイルを読み込むのに使った時間はムダになる。
# なので、ビルドコンテキストには不要なファイルは置くべきでない。buildするのにムダに時間がかかってしまうため。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   - 
# 8
# ホストの./backend/apiにコンテナのルート直下の/api-appをマウント。
# ホストで同期した/apiが変更されると,コンテナの/apiも自動的に変更される。
# 誰がどのPCのどのディレクトリで起動してもいいように、カレントディレクトリを指定する場合もある。
# これはバインドマウント：ホストの既存のディレクトリやファイルを使用。
# 頻繁に書き換えるファイルはバインドマウントの方がいい。