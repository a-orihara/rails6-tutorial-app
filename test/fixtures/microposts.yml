orange:
  content: "I just ate an orange!"
  created_at: <%= 10.minutes.ago %>
  # 2
  user: michael

tau_manifesto:
  content: "Check out the @tauday site by @mhartl: https://tauday.com"
  created_at: <%= 3.years.ago %>
  user: michael

cat_video:
  content: "Sad cats are sad: https://youtu.be/PKffm2uI4dk"
  created_at: <%= 2.hours.ago %>
  user: michael

most_recent:
  content: "Writing a short test"
  created_at: <%= Time.zone.now %>
  user: michael

<% 30.times do |n| %>
micropost_<%= n %>:
  content: <%= Faker::Lorem.sentence(word_count: 5) %>
  created_at: <%= 42.days.ago %>
  user: michael
<% end %>

# 所有者michael以外の投稿
ants:
  content: "Oh, is that what you want? Because that's how you get ants!"
  created_at: <%= 2.years.ago %>
  user: archer

zone:
  content: "Danger zone!"
  created_at: <%= 3.days.ago %>
  user: archer

tone:
  content: "I'm sorry. Your words made sense, but your sarcastic tone did not."
  created_at: <%= 10.minutes.ago %>
  user: lana

van:
  content: "Dude, this van's, like, rolling probable cause."
  created_at: <%= 4.hours.ago %>
  user: lana

# 1
# 埋め込み Ruby を使って created_at カラムに値を明示的にセットし ている点に注目してください。created_at
# カラムは Rails によって自動的に更新される ため基本的には手動で更新できませんが、fixture ファイルの中では
# 更新可能になっています 。
# この仕組みを使って意図的に順序を変更しています。例えばファイル内の一番下のサンプルデータは最後 に生成されるの
# で最も新しい投稿になるように修正する、といった感じです。多くのシステムで fixture はファイル内で上から順に
# 実行されるため、ファイル内の最下部にあるサンプルデータが最後に作成され ますが、この振る舞いに依存したテスト
# は書くべきでは無いでしょう。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# 2
# user を michael と認識させると、このマイクロポストを以下のユーザー fixture にある 対応ユーザーに関連
# 付けることを Rails に指示できます。

