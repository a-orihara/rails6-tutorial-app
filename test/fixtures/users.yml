# 1 テスト用ユーザー。
michael:
  name: Michael Example
  email: michael@example.com
  # erb。暗号化するメソッドを自作。
  password_digest: <%= User.digest('password') %>
  admin: true
  activated: true
  activated_at: <%= Time.zone.now %>

archer:
  name: Sterling Archer
  email: duchess@example.gov
  password_digest: <%= User.digest('password') %>
  activated: true
  activated_at: <%= Time.zone.now %>

# ページネーションのテストの為に30＋下記二名追加。2ぺーじ目が出来るから
lana:
  name: Lana Kane
  email: hands@example.gov
  password_digest: <%= User.digest('password') %>
  activated: true
  activated_at: <%= Time.zone.now %>

malory:
  name: Malory Archer
  email: boss@example.gov
  password_digest: <%= User.digest('password') %>

<% 30.times do |n| %> 
user_<%= n %>:
  name: <%= "User #{n}" %>
  email: <%= "user-#{n}@example.com" %>
  password_digest: <%= User.digest('password') %>
  activated: true
  activated_at: <%= Time.zone.now %>
<% end %>

# 1
# has_secure_password で必要となる password_digest 属性はこれで準備できましたが、ハッシュ
# 化されていない生のパスワードも参照できると便利です。しかし残念な ことに、fixture ではこのよう
# なことはできません。さらに、リスト 8.23 に password 属 性を追加すると、そのようなカラムはデ
# ータベースに存在しないというエラーが発生します。実際、データベースにはそんなカラムはありません。
# この状況を切り抜けるため、 テスト用の fixture では全員同じパスワード「password」を使うこと
# にします(これは fixture でよく使われる手法です)。

